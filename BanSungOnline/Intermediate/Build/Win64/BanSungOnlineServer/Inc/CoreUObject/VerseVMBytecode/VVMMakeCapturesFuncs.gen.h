// Copyright Epic Games, Inc. All Rights Reserved.

// WARNING: This code is autogenerated by VerseVMBytecodeGenerator.cs. Do not edit directly

#pragma once

FORCEINLINE FAddSuspensionCaptures MakeCaptures(FOpAdd& Op)
{
    return FAddSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FSubSuspensionCaptures MakeCaptures(FOpSub& Op)
{
    return FSubSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FMulSuspensionCaptures MakeCaptures(FOpMul& Op)
{
    return FMulSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FDivSuspensionCaptures MakeCaptures(FOpDiv& Op)
{
    return FDivSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FModSuspensionCaptures MakeCaptures(FOpMod& Op)
{
    return FModSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FMutableAddSuspensionCaptures MakeCaptures(FOpMutableAdd& Op)
{
    return FMutableAddSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FNegSuspensionCaptures MakeCaptures(FOpNeg& Op)
{
    return FNegSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Source));
}

FORCEINLINE FQuerySuspensionCaptures MakeCaptures(FOpQuery& Op)
{
    return FQuerySuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Source));
}

FORCEINLINE FCallSuspensionCaptures MakeCaptures(FOpCall& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    VValue ReturnEffectToken = VValue::Placeholder(VPlaceholder::New(Context, 0));
    EffectToken.Set(Context, ReturnEffectToken);
    TArray<TWriteBarrier<VValue>> ArrayArguments;
    for (auto& CurrentValue : GetOperands(Op.Arguments))
    {
        ArrayArguments.Add({Context, GetOperand(CurrentValue)});
    }
    return FCallSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Callee), MoveTemp(ArrayArguments), IncomingEffectToken, ReturnEffectToken);
}

FORCEINLINE FCallNamedSuspensionCaptures MakeCaptures(FOpCallNamed& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    VValue ReturnEffectToken = VValue::Placeholder(VPlaceholder::New(Context, 0));
    EffectToken.Set(Context, ReturnEffectToken);
    TArray<TWriteBarrier<VValue>> ArrayArguments;
    for (auto& CurrentValue : GetOperands(Op.Arguments))
    {
        ArrayArguments.Add({Context, GetOperand(CurrentValue)});
    }
    TArray<TWriteBarrier<VUniqueString>> ArrayNamedArguments;
    for (auto& CurrentValue : GetOperands(Op.NamedArguments))
    {
        ArrayNamedArguments.Add({Context, *CurrentValue});
    }
    TArray<TWriteBarrier<VValue>> ArrayNamedArgumentVals;
    for (auto& CurrentValue : GetOperands(Op.NamedArgumentVals))
    {
        ArrayNamedArgumentVals.Add({Context, GetOperand(CurrentValue)});
    }
    return FCallNamedSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Callee), MoveTemp(ArrayArguments), MoveTemp(ArrayNamedArguments), MoveTemp(ArrayNamedArgumentVals), IncomingEffectToken, ReturnEffectToken);
}

FORCEINLINE FVarGetSuspensionCaptures MakeCaptures(FOpVarGet& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    return FVarGetSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Var), IncomingEffectToken);
}

FORCEINLINE FVarSetSuspensionCaptures MakeCaptures(FOpVarSet& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    return FVarSetSuspensionCaptures(Context, GetOperand(Op.Var), GetOperand(Op.Value), IncomingEffectToken);
}

FORCEINLINE FFreezeSuspensionCaptures MakeCaptures(FOpFreeze& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    return FFreezeSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Value), IncomingEffectToken);
}

FORCEINLINE FMeltSuspensionCaptures MakeCaptures(FOpMelt& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    return FMeltSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Value), IncomingEffectToken);
}

FORCEINLINE FLengthSuspensionCaptures MakeCaptures(FOpLength& Op)
{
    return FLengthSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Container));
}

FORCEINLINE FCallSetSuspensionCaptures MakeCaptures(FOpCallSet& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    return FCallSetSuspensionCaptures(Context, GetOperand(Op.Container), GetOperand(Op.Index), GetOperand(Op.ValueToSet), IncomingEffectToken);
}

FORCEINLINE FNewArraySuspensionCaptures MakeCaptures(FOpNewArray& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : GetOperands(Op.Values))
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewArraySuspensionCaptures(Context, GetOperand(Op.Dest), MoveTemp(ArrayValues));
}

FORCEINLINE FNewMutableArraySuspensionCaptures MakeCaptures(FOpNewMutableArray& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : GetOperands(Op.Values))
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewMutableArraySuspensionCaptures(Context, GetOperand(Op.Dest), MoveTemp(ArrayValues));
}

FORCEINLINE FNewMutableArrayWithCapacitySuspensionCaptures MakeCaptures(FOpNewMutableArrayWithCapacity& Op)
{
    return FNewMutableArrayWithCapacitySuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Size));
}

FORCEINLINE FArrayAddSuspensionCaptures MakeCaptures(FOpArrayAdd& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    return FArrayAddSuspensionCaptures(Context, GetOperand(Op.Container), GetOperand(Op.ValueToAdd), IncomingEffectToken);
}

FORCEINLINE FInPlaceMakeImmutableSuspensionCaptures MakeCaptures(FOpInPlaceMakeImmutable& Op)
{
    return FInPlaceMakeImmutableSuspensionCaptures(Context, GetOperand(Op.Container));
}

FORCEINLINE FNewOptionSuspensionCaptures MakeCaptures(FOpNewOption& Op)
{
    return FNewOptionSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Value));
}

FORCEINLINE FNewMapSuspensionCaptures MakeCaptures(FOpNewMap& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayKeys;
    for (auto& CurrentValue : GetOperands(Op.Keys))
    {
        ArrayKeys.Add({Context, GetOperand(CurrentValue)});
    }
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : GetOperands(Op.Values))
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewMapSuspensionCaptures(Context, GetOperand(Op.Dest), MoveTemp(ArrayKeys), MoveTemp(ArrayValues));
}

FORCEINLINE FMapKeySuspensionCaptures MakeCaptures(FOpMapKey& Op)
{
    return FMapKeySuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Map), GetOperand(Op.Index));
}

FORCEINLINE FMapValueSuspensionCaptures MakeCaptures(FOpMapValue& Op)
{
    return FMapValueSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Map), GetOperand(Op.Index));
}

FORCEINLINE FNewClassSuspensionCaptures MakeCaptures(FOpNewClass& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayInherited;
    for (auto& CurrentValue : GetOperands(Op.Inherited))
    {
        ArrayInherited.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewClassSuspensionCaptures(Context, GetOperand(Op.Dest), *Op.Package, *Op.Name, *Op.UEMangledName, Op.ImportStruct.Get(), MoveTemp(ArrayInherited), *Op.Constructor, Op.bNative, Op.ClassKind);
}

FORCEINLINE FNewObjectSuspensionCaptures MakeCaptures(FOpNewObject& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : GetOperands(Op.Values))
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewObjectSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Class), *Op.Fields, MoveTemp(ArrayValues));
}

FORCEINLINE FLoadFieldSuspensionCaptures MakeCaptures(FOpLoadField& Op)
{
    return FLoadFieldSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Object), *Op.Name);
}

FORCEINLINE FLoadFieldFromSuperSuspensionCaptures MakeCaptures(FOpLoadFieldFromSuper& Op)
{
    return FLoadFieldFromSuperSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Scope), GetOperand(Op.Self), *Op.Name);
}

FORCEINLINE FUnifyFieldSuspensionCaptures MakeCaptures(FOpUnifyField& Op)
{
    return FUnifyFieldSuspensionCaptures(Context, GetOperand(Op.Object), *Op.Name, GetOperand(Op.Value));
}

FORCEINLINE FSetFieldSuspensionCaptures MakeCaptures(FOpSetField& Op)
{
    VValue IncomingEffectToken = EffectToken.Get(Context);
    return FSetFieldSuspensionCaptures(Context, GetOperand(Op.Object), *Op.Name, GetOperand(Op.Value), IncomingEffectToken);
}

FORCEINLINE FNeqSuspensionCaptures MakeCaptures(FOpNeq& Op)
{
    return FNeqSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FLtSuspensionCaptures MakeCaptures(FOpLt& Op)
{
    return FLtSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FLteSuspensionCaptures MakeCaptures(FOpLte& Op)
{
    return FLteSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FGtSuspensionCaptures MakeCaptures(FOpGt& Op)
{
    return FGtSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FGteSuspensionCaptures MakeCaptures(FOpGte& Op)
{
    return FGteSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

